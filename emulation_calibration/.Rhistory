setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
## packages
library(DiceKriging);library(splines)
## Fit an emulator and Model comparison for datatype A
## Compute from linear trend to 6th order polynomial trend model
M1<-km(~x , design=theta, response=response.a)
M2<-km(~x+I(x^2), design=theta, response=response.a)
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
## packages
library(DiceKriging);library(splines)
load("/Users/solkim/Downloads/emulation_calibration/simulation_data.RData")
## packages
library(DiceKriging);library(splines)
## Fit an emulator and Model comparison for datatype A
## Compute from linear trend to 6th order polynomial trend model
M1<-km(~x , design=theta, response=response.a)
M2<-km(~x+I(x^2), design=theta, response=response.a)
M3<-km(~x+I(x^2)+I(x^3), design=theta, response=response.a)
M4<-km(~x+I(x^2)+I(x^3)+I(x^4), design=theta, response=response.a)
M5<-km(~x+I(x^2)+I(x^3)+I(x^4)+I(x^5), design=theta, response=response.a)
M6<-km(~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6), design=theta, response=response.a)
M7<-km(~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7), design=theta, response=response.a)
## Comparing AIC and BIC
## num_params=covariance parameter (1) + variance (1) + number of coef (order + 1)
num_params1 <- M1@covariance@param.n + 1 + 2
num_params2 <- M2@covariance@param.n + 1 + 3
num_params3 <- M3@covariance@param.n + 1 + 4
num_params4 <- M4@covariance@param.n + 1 + 5
num_params5 <- M5@covariance@param.n + 1 + 6
num_params6 <- M6@covariance@param.n + 1 + 7
num_params7 <- M7@covariance@param.n + 1 + 8
## Compute AIC: 2*the number of parameters - 2*maximum log likelihood
aic.1<-2*num_params1 -2*M1@logLik
aic.2<-2*num_params2 -2*M2@logLik
aic.3<-2*num_params3 -2*M3@logLik
aic.4<-2*num_params4 -2*M4@logLik
aic.5<-2*num_params5 -2*M5@logLik
aic.6<-2*num_params6 -2*M6@logLik
aic.7<-2*num_params7 -2*M7@logLik
## Compute BIC: the number of parameters * log(the number of obs) - 2 * maximum log liklihood
bic.1<-num_params1*log(M1@n) -2*M1@logLik
bic.2<-num_params2*log(M2@n) -2*M2@logLik
bic.3<-num_params3*log(M3@n) -2*M3@logLik
bic.4<-num_params4*log(M4@n) -2*M4@logLik
bic.5<-num_params5*log(M5@n) -2*M5@logLik
bic.6<-num_params6*log(M6@n) -2*M6@logLik
bic.7<-num_params7*log(M6@n) -2*M7@logLik
## Now, Fit an emulator and Model comparison for datatype B
## Compute from linear trend to 6th order polynomial trend model
M11<-km(~x , design=theta, response=response.b)
M21<-km(~x+I(x^2), design=theta, response=response.b)
M31<-km(~x+I(x^2)+I(x^3), design=theta, response=response.b)
M41<-km(~x+I(x^2)+I(x^3)+I(x^4), design=theta, response=response.b)
M51<-km(~x+I(x^2)+I(x^3)+I(x^4)+I(x^5), design=theta, response=response.b)
M61<-km(~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6), design=theta, response=response.b)
M71<-km(~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7), design=theta, response=response.b)
M81<-km(~x+I(x^2)+I(x^3)+I(x^4)+I(x^5)+I(x^6)+I(x^7)+I(x^8), design=theta, response=response.b)
## Comparing AIC and BIC
## num_params=covariance parameter (1) + variance (1) + number of coef (order + 1)
num_params1 <- M11@covariance@param.n + 1 + 2
num_params2 <- M21@covariance@param.n + 1 + 3
num_params3 <- M31@covariance@param.n + 1 + 4
num_params4 <- M41@covariance@param.n + 1 + 5
num_params5 <- M51@covariance@param.n + 1 + 6
num_params6 <- M61@covariance@param.n + 1 + 7
num_params7 <- M71@covariance@param.n + 1 + 8
num_params8 <- M81@covariance@param.n + 1 + 9
## Compute AIC: 2*the number of parameters - 2*maximum log likelihood
aic.11<-2*num_params1 -2*M11@logLik
aic.21<-2*num_params2 -2*M21@logLik
aic.31<-2*num_params3 -2*M31@logLik
aic.41<-2*num_params4 -2*M41@logLik
aic.51<-2*num_params5 -2*M51@logLik
aic.61<-2*num_params6 -2*M61@logLik
aic.71<-2*num_params7 -2*M71@logLik
aic.81<-2*num_params8 -2*M81@logLik
## Compute BIC: the number of parameters * log(the number of obs) - 2 * maximum log liklihood
bic.11<-num_params1*log(M11@n) -2*M11@logLik
bic.21<-num_params2*log(M21@n) -2*M21@logLik
bic.31<-num_params3*log(M31@n) -2*M31@logLik
bic.41<-num_params4*log(M41@n) -2*M41@logLik
bic.51<-num_params5*log(M51@n) -2*M51@logLik
bic.61<-num_params6*log(M61@n) -2*M61@logLik
bic.71<-num_params7*log(M71@n) -2*M71@logLik
bic.81<-num_params8*log(M81@n) -2*M81@logLik
## AIC and BIC visualize
par(mfrow=c(1,2))
aic<-c(aic.1,aic.2,aic.3,aic.4,aic.5,aic.6, aic.7)
bic<-c(bic.1,bic.2,bic.3,bic.4,bic.5,bic.6, bic.7)
xtick<-c("linear","2nd polynoimal","3rd polynoimal","4th polynoimal",
"5th polynoimal", "6th polynoimal", "7th polynoimal")
plot(aic, type="o",col="black",lwd=2,main="AIC and BIC visualize (A)",ylab="AIC and BIC",
xaxt="n",xlab="models",ylim=c(-10,20))
lines(bic, type="o", col="red",lwd=2)
axis(1, at = 1:length(aic), labels = xtick)
legend("topright", legend = c("AIC", "BIC"),col = c("black", "red"), lty=1, lwd = 2)
aic1<-c(aic.11,aic.21,aic.31,aic.41,aic.51,aic.61,aic.71,aic.81)
bic1<-c(bic.11,bic.21,bic.31,bic.41,bic.51,bic.61,bic.71,bic.81)
xtick<-c("linear","2nd polynoimal","3rd polynoimal","4th polynoimal",
"5th polynoimal", "6th polynoimal", "7th polynoimal", "8th polynomial")
plot(aic1, type="o",col="black",lwd=2,main="AIC and BIC visualize (B)",ylab="AIC and BIC",
xaxt="n",xlab="models", ylim = c(-100, 10))
lines(bic1, type="o", col="red",lwd=2)
axis(1, at = 1:length(aic1), labels = xtick)
legend("topright", legend = c("AIC", "BIC"),col = c("black", "red"), lty=1, lwd = 2)
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/whiskeyindia/Downloads/Personal_reasearch/ABM_with_Sol_Kim/emulation_calibration')
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
load("/Users/solkim/Downloads/emulation_calibration/simulation_data.RData")
obs.a<-read.csv('dataA_per_months.csv');obs.b<-read.csv('dataB_per_months.csv')
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
## put the path of "emulation_calibration" folder in setwd()
# setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
obs.a<-read.csv('dataA_per_months.csv');obs.b<-read.csv('dataB_per_months.csv')
obs.a<-obs.a$PHAI_counts;obs.b<-obs.b$PHAI_counts
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
obs.a<-read.csv('dataA_per_months.csv');obs.b<-read.csv('dataB_per_months.csv')
## put the path of "emulation_calibration" folder in setwd()
setwd('MachintosinHD/Users/solkim/Downloads/emulation_calibration')
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
load("/Users/solkim/Downloads/emulation_calibration/calibration_results.RData")
load("/Users/solkim/Downloads/emulation_calibration/simulation_data.RData")
obs.a<-read.csv('dataA_per_months.csv');obs.b<-read.csv('dataB_per_months.csv')
getwd()  # 현재 작업 디렉토리 확인
list.files("/Users/solkim/Downloads/emulation_calibration/")  # 해당 폴더 내 파일 목록 확인
## Load ABM simulator data and observation for data A and B
load("/Downloads/emulation_calibration/simulation_data.RData")
## put the path of "emulation_calibration" folder in setwd()
setwd('/Users/solkim/Downloads/emulation_calibration')
getwd()
## put the path of "emulation_calibration" folder in setwd()
ls -ld /Users/solkim/Downloads/emulation_calibration
ls -ld /Users/solkim/Downloads/emulation_calibration
setwd('/Users/solkim/Downloads/emulation_calibration')
getwd()
setwd("/Users/solkim/Downloads/emulation_calibration")
getwd()  # 변경되었는지 확인
setwd("/Users/solkim/Downloads/emulation_calibration")
getwd()  # 변경되었는지 확인
setwd("/Users/solkim/Downloads/emulation_calibration")
print(getwd())
setwd('/Users/solkim/Downloads/emulation_calibration')
setwd('/Users/solkim/Downloads/emulation_calibration')
setwd('/Users/solkim/Downloads/emulation_calibration')
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
setwd('/Users/solkim/Downloads/emulation_calibration')
## Set seed number to regenerate the result again
set.seed(1234)
getwd()
setwd("/Users/solkim")
getwd()
setwd("/Users/solkim/Downloads")
getwd()
setwd("/Users/solkim/Downloads/emulation_calibration")
getwd()
setwd("/Users/solkim/repos/abm_cpe_model/emulation_calibration")
getwd()
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
obs.a<-read.csv('dataA_per_months.csv');obs.b<-read.csv('dataB_per_months.csv')
obs.a<-obs.a$PHAI_counts;obs.b<-obs.b$PHAI_counts
obs.a<-obs.a[3:length(obs.a)];obs.b<-obs.b[1:30]
## Visualize simulator output
par(mfrow=c(1,2))
plot(x=theta$x, y=exp(response.a$response), type="o", main = "simulator output (A)",
lwd=2, xlab="input parameter", ylab="mean output")
plot(x=theta$x, y=exp(response.b$response), type="o", main = "simulator output (B)",
lwd=2, xlab="input parameter", ylab="mean output")
## packages
library(DiceKriging);library(splines)
## Fit an emulator
fit.emul.a<-km(~x+I(x^2)+I(x^3), design=theta, response=response.a)
fit.emul.b<-km(~x+I(x^2)+I(x^3), design=theta, response=response.b)
## Visualize; Does it interpolate between the points well?
new.grid<-data.frame(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200))
pred.emul.a<-predict.km(fit.emul.a, newdata = new.grid, "UK")
pred.emul.b<-predict.km(fit.emul.b, newdata = new.grid, "UK")
par(mfrow=c(1,2))
plot(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(A)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.a$mean,lwd=3)
points(x=theta[,1], y=response.a[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
plot(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(B)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.b$mean,lwd=3)
points(x=theta[,1], y=response.b[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
## MCMC
## constants
n.iter<-50000; init.beta<-0.1; step_size<-0.01;
init.eta<-exp(simulate(fit.emul.a,newdata=data.frame(x=init.beta)))
beta.sample<-numeric(n.iter); eta.sample<-numeric(n.iter)
beta.sample[1]<-init.beta; eta.sample[1]<-init.eta; acc_rate<-0
## Run MCMC
for(i in 2:n.iter){
prop <- rnorm(1,beta.sample[i-1],sd=step_size)
if(prop<min(theta) | prop>max(theta)){
beta.sample[i]<-beta.sample[i-1]
eta.sample[i]<-eta.sample[i-1]
}
else{
eta_pr<-exp(simulate(fit.emul.a,newdata=data.frame(x=prop)))
ll_pr<-sum(dpois(obs.a, eta_pr, log=T))
ll_cu<-sum(dpois(obs.a, (eta.sample[i-1]), log=T))
acc<-ll_pr-ll_cu
if(log(runif(1))<acc){ #accept
beta.sample[i]<-prop
eta.sample[i]<-eta_pr
acc_rate<-acc_rate+1
}
else{
beta.sample[i]<-beta.sample[i-1]
eta.sample[i]<-eta.sample[i-1]
}
}
}
acc_rate<-acc_rate/n.iter ## Ideal acceptance rate is in range 0.2 ~ 0.5
acc_rate
## Sample visualization without burn-in
par(mfrow=c(2,2))
ts.plot(eta.sample, main="Emulator samples_A")
ts.plot(beta.sample, main="Parameter (beta) samples_A")
## For data B
## MCMC
## constants
n.iter<-50000; init.beta<-0.1; step_size<-0.005;
init.eta<-exp(simulate(fit.emul.b,newdata=data.frame(x=init.beta)))
## For data B
## MCMC
## constants
n.iter<-50000; init.beta<-0.1; step_size<-0.005;
init.eta<-exp(simulate(fit.emul.b,newdata=data.frame(x=init.beta)))
beta.sample2<-numeric(n.iter); eta.sample2<-numeric(n.iter)
beta.sample2[1]<-init.beta; eta.sample2[1]<-init.eta; acc_rate2<-0
obs.b<-read.csv('/Users/solkim/repos/abm_cpe_model/emulation_calibration/dataB_per_months.csv')
obs.b<-obs.b$PHAI_counts[1:30]
for(i in 2:n.iter){
prop <- rnorm(1,beta.sample2[i-1],sd=step_size)
if(prop<min(theta) | prop>max(theta)){
beta.sample2[i]<-beta.sample2[i-1]
eta.sample2[i]<-eta.sample2[i-1]
}
else{
eta_pr<-exp(simulate(fit.emul.b,newdata=data.frame(x=prop)))
ll_pr<-sum(dpois(obs.b, eta_pr, log=T))
ll_cu<-sum(dpois(obs.b, (eta.sample2[i-1]), log=T))
acc<-ll_pr-ll_cu
if(log(runif(1)) < acc){ #accept
beta.sample2[i]<-prop
eta.sample2[i]<-eta_pr
acc_rate2<-acc_rate2+1
}
else{
beta.sample2[i]<-beta.sample2[i-1]
eta.sample2[i]<-eta.sample2[i-1]
}
}
}
acc_rate2<-acc_rate2/n.iter
acc_rate2
acc_rate2
ts.plot(eta.sample2, main="Emulator samples_B")
ts.plot(beta.sample2, main="Parameter (beta) samples_B")
## Post-processing
n.burnin<-1000;
beta.sample<-beta.sample[n.burnin:length(beta.sample)]
beta.sample2<-beta.sample2[n.burnin:length(beta.sample2)]
# After diagnosis
par(mfrow=c(2,1))
# Visualize: Trace, acf
ts.plot(beta.sample, main="Parameter (beta) samples_A")
ts.plot(beta.sample2, main="Parameter (beta) samples_B")
acf(beta.sample);acf(beta.sample2)
### Compare both results
par(mfrow=c(1,1))
boxplot(beta.sample, beta.sample2, ylab="beta", xlab="Calibration scenario",
names=c("data_A","data_B"), main="Posterior sample boxplot")
mean(beta.sample);mean(beta.sample2)
quantile(beta.sample); quantile(beta.sample2)
write.csv(beta.sample, file="calibration_results_A.csv")
write.csv(beta.sample2, file="calibration_results_B.csv")
save(beta.sample, beta.sample2, eta.sample, eta.sample2, acc_rate, acc_rate2,
file = "calibration_results.RData")
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
setwd("/Users/solkim/repos/abm_cpe_model/emulation_calibration")
getwd()
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
obs.a<-read.csv('dataA_per_months.csv');obs.b<-read.csv('dataB_per_months.csv')
obs.a<-obs.a$PHAI_counts;obs.b<-obs.b$PHAI_counts
obs.a<-obs.a[3:length(obs.a)];obs.b<-obs.b[1:30]
## Visualize simulator output
par(mfrow=c(1,2))
plot(x=theta$x, y=exp(response.a$response), type="o", main = "simulator output (A)",
lwd=2, xlab="input parameter", ylab="mean output")
plot(x=theta$x, y=exp(response.b$response), type="o", main = "simulator output (B)",
lwd=2, xlab="input parameter", ylab="mean output")
## packages
library(DiceKriging);library(splines)
## Fit an emulator
fit.emul.a<-km(~x+I(x^2)+I(x^3), design=theta, response=response.a)
fit.emul.b<-km(~x+I(x^2)+I(x^3), design=theta, response=response.b)
## Visualize; Does it interpolate between the points well?
new.grid<-data.frame(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200))
pred.emul.a<-predict.km(fit.emul.a, newdata = new.grid, "UK")
pred.emul.b<-predict.km(fit.emul.b, newdata = new.grid, "UK")
par(mfrow=c(1,2))
plot(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(A)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.a$mean,lwd=3)
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
}
### CRE_ABM Emulation ###
## Reset environment ##
rm(list = ls())
setwd("/Users/solkim/repos/abm_cpe_model/emulation_calibration")
getwd()
## Set seed number to regenerate the result again
set.seed(1234)
## Load ABM simulator data and observation for data A and B
load("simulation_data.RData")
obs.a<-read.csv('dataA_per_months.csv');obs.b<-read.csv('dataB_per_months.csv')
obs.a<-obs.a$PHAI_counts;obs.b<-obs.b$PHAI_counts
obs.a<-obs.a[3:length(obs.a)];obs.b<-obs.b[1:30]
## Visualize simulator output
par(mfrow=c(1,2))
plot(x=theta$x, y=exp(response.a$response), type="o", main = "simulator output (A)",
lwd=2, xlab="input parameter", ylab="mean output")
plot(x=theta$x, y=exp(response.b$response), type="o", main = "simulator output (B)",
lwd=2, xlab="input parameter", ylab="mean output")
## packages
library(DiceKriging);library(splines)
## Fit an emulator
fit.emul.a<-km(~x+I(x^2)+I(x^3), design=theta, response=response.a)
fit.emul.b<-km(~x+I(x^2)+I(x^3), design=theta, response=response.b)
## Visualize; Does it interpolate between the points well?
new.grid<-data.frame(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200))
pred.emul.a<-predict.km(fit.emul.a, newdata = new.grid, "UK")
pred.emul.b<-predict.km(fit.emul.b, newdata = new.grid, "UK")
par(mfrow=c(1,2))
plot(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(A)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.a$trend,lwd=3)
points(x=theta[,1], y=response.a[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
plot(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(B)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.b$trend,lwd=3)
points(x=theta[,1], y=response.b[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
## Fit an emulator
fit.emul.a<-km(~x+I(x^2)+I(x^3), design=theta, response=response.a)
fit.emul.b<-km(~x+I(x^2)+I(x^3), design=theta, response=response.b)
## Visualize; Does it interpolate between the points well?
new.grid<-data.frame(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200))
pred.emul.a<-predict.km(fit.emul.a, newdata = new.grid, "UK")
pred.emul.b<-predict.km(fit.emul.b, newdata = new.grid, "UK")
par(mfrow=c(1,2))
plot(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(A)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.a$trend,lwd=3)
points(x=theta[,1], y=response.a[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
plot(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(B)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.b$trend,lwd=3)
points(x=theta[,1], y=response.b[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
## Visualize; Does it interpolate between the points well?
new.grid<-data.frame(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200))
pred.emul.a<-predict.km(fit.emul.a, newdata = new.grid, "UK")
pred.emul.b<-predict.km(fit.emul.b, newdata = new.grid, "UK")
par(mfrow=c(1,2))
plot(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(A)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.a$trend,lwd=3)
points(x=theta[,1], y=response.a[,1])
plot(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(B)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.b$trend,lwd=3)
points(x=theta[,1], y=response.b[,1])
## Fit an emulator
fit.emul.a<-km(~x+I(x^2)+I(x^3), design=theta, response=response.a)
fit.emul.b<-km(~x+I(x^2)+I(x^3), design=theta, response=response.b)
## Visualize; Does it interpolate between the points well?
new.grid<-data.frame(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200))
pred.emul.a<-predict.km(fit.emul.a, newdata = new.grid, "UK")
pred.emul.b<-predict.km(fit.emul.b, newdata = new.grid, "UK")
par(mfrow=c(1,2))
plot(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(A)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.a, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.a$trend,lwd=3)
points(x=theta[,1], y=response.a[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
plot(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid), type="l",
col="grey",lty=3, xlab="beta",ylab="emul",main="Emulation output(B)")
for(i in 1:50){
lines(x=new.grid[,1],y=simulate(fit.emul.b, newdata=new.grid),
col="grey",lty=3)
}
lines(x=seq(theta[1,1], theta[dim(theta)[1],1], length.out=200), y=pred.emul.b$trend,lwd=3)
points(x=theta[,1], y=response.b[,1])
legend("topleft", legend = c("mean function", "samples"), col=c("black","grey"), lty=c(1, 3), lwd=c(3,1))
